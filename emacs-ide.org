Execute these code snippets within emacs to enable kcats IDE
functionality. Soon these will be made into installable elpa packages.
* major mode
#+BEGIN_SRC emacs-lisp :results none
  (defface kcats-brackets 
    '((((class color)) (:foreground "DimGrey" :weight bold)))
    "kcats brackets" :group 'faces)
  (defface kcats-stackop 
    '((((class color)) (:foreground "LightGreen" :inherit 'font-lock-keyword-face)))
    "kcats stack manipulation operation" :group 'faces)

  (defconst kcats-font-lock-keywords
        `(("\\[\\|\\]" 0 'kcats-brackets)
          (";;.*" 0 'font-lock-comment-face)
          (,(regexp-opt '("swap" "swapdown" "swapdeep" "drop" "dropdown" "dropdeep" "sink" "float" "clone" "snapshot" "evert" "flip" "clonedown" "clonedeep" "over" "under")  'words) . (0 font-lock-builtin-face))
          (,(regexp-opt '("yes" "[]") 'words) . (0 font-lock-type-face))
          (,(regexp-opt '("animate" "file-in" "file-out" "handoff" "select" "sender" "receiver" "serversocket" "socket" "standard" "timer" "timestamps") 'words) . (0 font-lock-keyword-face))
          (,(regexp-opt '("first" "second" "last" "put" "take" "pop" "step" "filter" "cut"
                          "map" "count" "join" "rest" "wrap" "pair" "triplet" "unwrap" "reverse" "split" "sort" "fold" "slice") 'words) . (0 font-lock-function-name-face))
          (,(regexp-opt '("execute" "dip" "dive" "divedown" "divedeep" "dipdown" "dipdeep" "shield" "shielddown" "shielddeep" "inject"
                          "loop" "while" "until" "prime" "if" "when" "branch" "recur" "times") 'words) . '(0 font-lock-preprocessor-face))
          (,(regexp-opt '("draft" "inscribe" "resolve" "using" "let") 'words) . '(0 font-lock-constant-face))
          ("#?\"" 0 'double-quote prepend)))

  (add-hook 'kcats-mode-hook (lambda () (font-lock-add-keywords nil kcats-font-lock-keywords)))

  (require 'smie) ;; indentation engine

  (setq kcats-mode-syntax-table (let ((table (make-syntax-table)))
      ;; Initialize ASCII charset as symbol syntax
      (modify-syntax-entry '(0 . 127) "_" table)

      ;; Word syntax
      (modify-syntax-entry '(?0 . ?9) "w" table)
      (modify-syntax-entry '(?a . ?z) "w" table)
      (modify-syntax-entry '(?A . ?Z) "w" table)

      ;; Whitespace
      (modify-syntax-entry ?\s " " table)
      (modify-syntax-entry ?\xa0 " " table) ; non-breaking space
      (modify-syntax-entry ?\t " " table)
      (modify-syntax-entry ?\f " " table)
      ;; Setting commas as whitespace makes functions like `delete-trailing-whitespace' behave unexpectedly (#561)
      (modify-syntax-entry ?, "." table)

      ;; Delimiters
      (modify-syntax-entry ?\[ "(]" table)
      (modify-syntax-entry ?\] ")[" table)

      ;; Others
      (modify-syntax-entry ?\; "<" table) ; comment start
      (modify-syntax-entry ?\n ">" table) ; comment end
      (modify-syntax-entry ?\" "\"" table) ; string
      (modify-syntax-entry ?\\ "\\" table) ; escape

      table))

  (define-derived-mode kcats-mode fundamental-mode "kcats"
    "major mode for editing kcats."
    (set-syntax-table kcats-mode-syntax-table)
    (setq-local comment-start ";") ;; try ";;"
    (setq-local comment-end "")

    (smie-setup nil (lambda (method arg)
                      (when (eq method :list-intro)
                        t)))
    (setq font-lock-defaults '(kcats-font-lock-keywords)))

  (add-to-list 'auto-mode-alist '("\\.kcats\\'" . kcats-mode))
  (defun my-restart-kcats-mode ()
    (interactive)
    (let ((kcats-mode-hook nil))
      (normal-mode)))

  (defun kcats-format-buffer ()
    "Format the current buffer according to the kcats language style."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (not (eobp))
        (pcase (char-after)
          (?\[ (kcats-indent))
          (?\] (kcats-dedent))
          (_ (forward-char)))))
    (goto-char (point-min))
    (while (search-forward "[[" nil t)
      (replace-match "[  ["))
    (goto-char (point-min))
    (while (search-forward-regexp "\\(\\[\\|\\]\\)[[:space:]]+\\(\\[\\|\\]\\)" nil t)
      (replace-match "\\1\\2")))

  (defun kcats-indent ()
    "Increase the indentation level by 2 spaces."
    (beginning-of-line)
    (indent-line-to (+ (current-indentation) 2)))

  (defun kcats-dedent ()
    "Decrease the indentation level by 2 spaces."
    (beginning-of-line)
    (indent-line-to (max (- (current-indentation) 2) 0)))

  ;; For kcats emoji insertions via english name
  (define-abbrev-table 'kcats-mode-abbrev-table
    '(("[]" "⬜")
      ("not" "☯️")
      ("execute" "▶️")
      ("loop" "🌀")
      ("branch" "↔️")
      ("if" "⚖️")
      ("dip" "🪄")
      ("dipdown" "•🪄")
      ("dipdeep" "••🪄")
      ("dive" "🐋")
      ("divedown" "•🐋")
      ("divedeep" "••🐋")
      ("while" "⏳")
      ("shield" "🛡️")
      ("shielddown" "•🛡️")
      ("shielddeep" "••🛡️")
      ("swap" "🔀")
      ("swapdown" "•🔀")
      ("swapdeep" "••🔀")
      ("map" "🚜")
      ("filter" "🧲")
      ("recur" "🪆")
      ("clone" "👥")
      ("clonedown" "•👥")
      ("clonedeep" "••👥")
      ("drop" "🗑️")
      ("dropdown" "•🗑️")
      ("dropdeep" "••🗑️")
      ("take" "📤")
      ("put" "📮")
      ("join" "🔗")
      ("step" "🪜")
      ("wrap" "🎁")
      ("unwrap" "🍫")
      ("float" "🛟")
      ("sink" "⚓")
      ("decorate" "🎀")
      ("every?" "💯")
      ("any?" "📣")
      ("inject" "💉")))

  (add-hook 'kcats-mode-hook 'abbrev-mode)

#+END_SRC

* org-babel mode
#+BEGIN_SRC emacs-lisp :results none
(defun org-babel-execute:kcats (body params)
  "Execute a block of kcats code with org-babel."
  (org-babel-eval
   kcats-babel-executable
   body))

(defcustom kcats-babel-executable "kcats"
  "Location of the kcats binary"
  :type 'string
  :group 'kcats-babel)
#+END_SRC

#+RESULTS:
: kcats-babel-executable

* Repl mode
#+begin_src emacs-lisp :results none
  (require 'comint)

  (defun kcats-send (proc code)
    "Send the CODE to the kcats interpreter and return the result."
    (message "Sending: %s" code)
    (let* ((code-len (+ (length code) 1))
           (code-str (format "%d\n%s" code-len code)))
      (with-temp-buffer
        (insert code-str)
        (process-send-region proc (point-min) (point-max)))
      (process-send-string proc "\n")
      ;;(accept-process-output proc)
      ))

  (defun kcats-repl ()
    "Start a REPL for process kcats."
    (interactive)
    (let ((buffer (get-buffer-create "*kcats* REPL")))
      (switch-to-buffer buffer)
      (unless (comint-check-proc buffer)
        (let ((buffer (comint-exec buffer "kcats" kcats-babel-executable nil '("-i")))
              (process (get-buffer-process buffer)))
          (set-process-buffer process buffer)
          (set-process-query-on-exit-flag process nil)
          (set-process-sentinel
           process
           (lambda (process event)
             (when (string= event "finished\n")
               (message "kcats process terminated.")))))
        (kcats-repl-mode))))

  (defun string-drop-first-line (s)
    (let ((lines (split-string s "\n" t)))
      (mapconcat 'identity (cdr lines) "\n")))

  (defun kcats-repl-insert-prompt (s)
    (concat s "kcats> "))

  (define-derived-mode kcats-repl-mode comint-mode "kcats REPL"
    "Major mode for interacting with the kcats process."
    (smartparens-strict-mode t)
    (add-hook 'comint-preoutput-filter-functions 'string-drop-first-line)
    (add-hook 'comint-preoutput-filter-functions 'kcats-repl-insert-prompt)
    (setq comint-prompt-regexp "^kcats>")
    (setq comint-highlight-input nil)
    (setq comint-use-prompt-regexp t)
    (setq comint-input-sender 'kcats-send)
    (set-syntax-table kcats-mode-syntax-table)
    (setq font-lock-defaults '(kcats-font-lock-keywords)))

  (defun my-restart-kcats-repl-mode ()
      (interactive)
      (let ((kcats-repl-mode-hook nil))
        (normal-mode)))


#+end_src
