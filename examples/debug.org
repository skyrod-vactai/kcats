* Count the number of times each word is executed while running a program.
#+begin_src kcats :results code
[[program [10 [0 >] [👥 dec] while]]]  ;; the sample program to run
environment
evaluate
#+end_src

#+RESULTS:
#+begin_src kcats
[[stack [0 1 2 3 4 5 6 7 8 9 10]] [program 🔳]]
#+end_src

#+begin_src kcats
10 [0 >] [👥 dec] while
#+end_src
#+RESULTS:
:
: [0 1 2 3 4 5 6 7 8 9 10]

#+begin_src kcats
  [🔀] 🍫 word?
#+end_src

#+RESULTS:
#+begin_src kcats
✔️
#+end_src

"Increment the counter, or set to 1 if nothing"
#+begin_src kcats
🔳 [inc] bail 1 or
#+end_src

#+RESULTS:
: 1

#+begin_src kcats :results code
🔳 ;; empty list to put word counts in
[[program [3 [0 >] [👥 dec] while]]]  ;; the sample program to run
environment
[[program] lookup something?] ;; something still in the program, keep running
[[[program] lookup first] 🛡️ ;; get the item we're about to execute
 🔀 ;; put it under the environment
 [[word?] ; if it's a word
  [wrap
   [[inc] bail 1 or]
   update] ;; the results, the count for the word about to execute
  [🗑️] ;; if it's not a word, do nothing
  if] 🪄
 eval-step] ;; evaluate the environment one step
while
🗑️ ;; drop the environment and just report the word counts
#+end_src

#+RESULTS:
#+begin_src kcats
[[wrap 1] [step 2] [first 4] [snapshot 4] [execute 1] [put 1] [inject 4] [loop 4] [dec 3] [decorate 1] [swap 5] [unwrap 14] [take 4] [join 1] [> 4] [while 1] [shield 4] [•🪄 1] [evert 16] [👥 8] [🪄 9]]
#+end_src

Now that we have generators and =frequencies= I think this can be greatly simplified:

#+begin_src kcats
  [5000 [0 >] [👥 dec] while]  ;; the sample program to run
  tracer
  [[program 0] lookup "foo" or] each
  [word?] keep
  frequencies
#+end_src

#+RESULTS:
#+begin_src kcats
[[> 1001]
 [clone 2002]
 [dec 1000]
 [decorate 2]
 [decorated 1]
 [dip 2007]
 [dip 2]
 [•🪄 1]
 [evert 4004]
 [execute 1]
 [first 1001]
 [inject 1001]
 [join 1]
 [loop 1001]
 [put 3]
 [shield 1001]
 [shield 1]
 [snapshot 1001]
 [step 5]
 [swap 1002]
 
 [take 1001]
 [unwrap 1001]
 [while 1]
 [wrap 3]]
[clone [[generate] 🪄 [🗑️ generate]
        while]
 dive]
[[[something?] [word? ☯️]]
 [execute] every?]
[generate [[[program 0]
            lookup "foo" or]
           bail]
 •🛡️]
[eval-step 👥]
🔳
#+end_src

** CANCELED spec checking
clojure spec check can be replaced with predicate programs, that will
be run with =shield= before the actual word and if it returns false,
will raise an error.
** TODO Trace output
#+begin_src kcats :results code
🔳 ;; results
[[program [1 [2 3 4 5] [*] step]]]  ;; the sample program to run
environment

[[program] lookup something?] ;; break?
[eval-step 👥 [put] 🪄]  ;; evaluate the environment one step
while

#+end_src

#+RESULTS:
#+begin_src kcats
[[[stack [120]] [program 🔳]]
 [[[stack [1]] [program [[2 3 4 5] [*] step]]]
  [[stack [[2 3 4 5] 1]] [program [[*] step]]]
  [[stack [[*] [2 3 4 5] 1]] [program [step]]]
  [[stack [[*] 2 1]] [program [execute [3 4 5] [*] step]]]
  [[stack [2 1]] [program [* [3 4 5] [*] step]]]
  [[stack [2]] [program [[3 4 5] [*] step]]]
  [[stack [[3 4 5] 2]] [program [[*] step]]]
  [[stack [[*] [3 4 5] 2]] [program [step]]]
  [[stack [[*] 3 2]] [program [execute [4 5] [*] step]]]
  [[stack [3 2]] [program [* [4 5] [*] step]]]
  [[stack [6]] [program [[4 5] [*] step]]]
  [[stack [[4 5] 6]] [program [[*] step]]]
  [[stack [[*] [4 5] 6]] [program [step]]]
  [[stack [[*] 4 6]] [program [execute [5] [*] step]]]
  [[stack [4 6]] [program [* [5] [*] step]]]
  [[stack [24]] [program [[5] [*] step]]]
  [[stack [[5] 24]] [program [[*] step]]]
  [[stack [[*] [5] 24]] [program [step]]]
  [[stack [[*] 5 24]] [program [execute]]]
  [[stack [5 24]] [program [*]]]
  [[stack [120]] [program 🔳]]]]
#+end_src


** DONE Step count limiting
When testing or debugging, limit the number of steps to avoid a
possible infinite loop.
#+begin_src kcats :results code
  200 ;; step count remaining
  [[program [10 [0 >] [👥 dec] while]]]  ;; the sample program to run
  environment

  [[program] lookup something? ;; something still in the program
   [positive?] 🪄 and] ;; still step budget remaining
  [eval-step ;; evaluate the environment one step
   [dec] 🪄] ;; decrease the step budget
  while

  ;[stack] lookup ;; return the output
#+end_src

#+RESULTS:
#+begin_src kcats
[[program [take 🪄 evert first [👥 dec [0 >] 🛡️] loop]] [stack [[[0 >] 4 5 6 7 8 9 10] 4 5 6 7 8 9 10]]] 0
#+end_src

** DONE Breakpoint
#+begin_src kcats
[[[[toe [+] unwrap =]
   [tos 3 >]]
  [execute]
  every?] ;; when to stop - when we're about to add and tos already >3
 [0 [1 2 3 4 5] [+] step]  ;; the sample program to run
 environment

 [[[[program] lookup something?] ;; something still in the program
   [🔀 execute not]] ;; don't stop yet
  [execute]
  every?] ;; break?
 [eval-step]  ;; evaluate the environment one step
 while]
#+end_src
** TODO Step over
#+begin_src kcats
[[0 [1 2 3 4 5] [+] step]  ;; the sample program to run
 environment

[[program] lookup count] 🛡️ 🔀;; count up the program length, we'll run until it's smaller than this

 [[program] lookup count
  [[positive?] [<=]] [execute] every?] ;; only stop if expr empty or shorter than we started off
 [eval-step]  ;; evaluate the environment one step
 while]
#+end_src
