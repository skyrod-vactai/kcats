;; create an API service
;; 
;; Takes from the stack:
;; 
;; * a Database (can be a regular data structure for read-only apis),
;; or a pipe to an actual (sql or other) database that accepts queries for
;; read/write ops
;;
;; * a program that modifies the dictionary that clients can
;; access. It should add words to make interaction easier (for
;; example, you might provide a word 'customers' that gets the customers
;; db table). It should also remove words that the clients should not be able
;; to use - for example, they shouldn't be able to create file or network pipes. 
;;
;; * a server socket pipe to serve from
;;
;; The client sends a program to run in a fresh environment where he
;; can expect to find:
;;
;; * The database (either a pipe or data structure)
;;
;; His program runs and then the resulting stack is returned to him.
;; 
;; socket listener
[[type ip-host] [port 12121] [address "127.0.0.1"]] pipe-out

;; book db
"examples/books.kcats" file-out slurp read

;functional ;; dictionary modifications, removes any io access 

;; API Server code begins here

;dictionary swap execute ;; -> new-dict db sock

;; start building the environment
[[program [take ;; the request as bytes
           swap ;; we want the pipe on top so we can dip the user's program under it -> pipe req db
           [string ;; translate to a string -> req-str db
            read first ;; the request program into a data structure -> prog db
            clone emit print ;; log the request
            functional [[execute] [] recover] lingo ;; the program -> items*
            snapshot] dip ;; under the pipe so the user's code has no access
           swap ;; -> response pipe
           emit ;; -> response-str pipe
           bytes ;; -> response-bytes pipe
           put ;; the response into the pipe
           drop ;; close the connection
          ]]] environment ;; -> env new-dict db sock 
;[dictionary] float ;; -> new-dict [dictionary] env db sock
;assign  ;; -> env db sock

;; now just need to assign the stack, which is [pipe db] 
float ;; -> sock env db
;; loop to accept connections and start new env with the db and a pipe
;; to take requests and reply
[[float ;; -> pipe db env
  pair ;; -> stack env
  [stack] swap ;; -> stack ks env
  assign ;; -> env
  environment
  animate ;; let it fly  
 ] shielddown  ;; shielded so as not to consume the db each time
 drop ;; drop whatever the result is of this iteration, we don't need it
]

step ;; accepts incoming connections until killed
