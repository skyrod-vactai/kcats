#+PROPERTY: header-args:kcats :results code :exports both


* Stuff
#+begin_src kcats
  1 0 [[+] •🛡️ ▶️ 🔀 👥] generator
#+end_src

#+RESULTS:
#+begin_src kcats
[[+] •🛡️ ▶️ 🔀 👥 [[[[+] •🛡️ ▶️ 🔀 👥] 🔳 🔳 [🔀] 🪆 ▶️] 🔀]
 🔳 ↔️]
0 1
#+end_src

#+begin_src kcats
  1 0 [[+] •🛡️ ▶️ 🔀 👥] generator ;; our original generator
  [odd?] keep ;; a generator that keeps calling the one
              ;; below it until it gets something that
              ;; passes the predicate we specified
  4 taker ;; another generator that calls generate 20 times
  ▶️ 🗑️ ▶️  🗑️ ▶️  🗑️ ▶️  🗑️ ▶️  
#+end_src

#+RESULTS:
#+begin_src kcats
🔳 [[[+] •🛡️ ▶️ 🔀 👥] 🔳 🔳 [🔀] 🪆 ▶️] 5 8
#+end_src

#+begin_src kcats
  [1 2 3 4 5] liberator
  [3 >]  
  [✂️2️⃣ ;; ▶️ the generator below to get value v
   [1️⃣ 🛡️ ▶️ ☯️] ;; check if v does NOT match given pred, 
   [🔳 🔳] ;; if generator below is finished, return 2 empty values 
   ↔️ dump ••🗑️] 🎒 
  [🗑️ 🗑️] ;; drop both the value v and the result of pred
  ⏳ ;; repeat until generator below is finished
   ▶️ dump
   [ •🗑️
   ] [🔳] [ 🔀] 🪆
   ;▶️ 🗑️ ▶️
   collect
#+end_src

#+RESULTS:
#+begin_src kcats
[✔️ 1 [[📤] 🔳 🔳 [🔀] 🪆 ▶️] [2 3 4 5]]
[✔️ 2 [[📤] 🔳 🔳 [🔀] 🪆 ▶️] [3 4 5]]
[✔️ 3 [[📤] 🔳 🔳 [🔀] 🪆 ▶️] [4 5]]
[🔳 4 [[📤] 🔳 🔳 [🔀] 🪆 ▶️] [5]]
[4 [5]]
[[actual 4]
 [asked [program?]]
 [handled 🔳]
 [reason "type mismatch"]
 [type error]
 [unwound [🪆 collect]]]
[🔀] [🔳] [•🗑️] 4 [5]
#+end_src

#+begin_src kcats
  [1 2 3 4 5] liberator
  [3 >]
  [2️⃣  ;; ▶️ the generator below to get value v
   [1️⃣ 🛡️ ▶️ ☯️] ;; check if v does NOT match given pred, 
   [🔳 🔳] ;; if generator below is finished, return 2 empty values 
   ⚖️
   [🗑️ 🗑️] ;; drop both the value v and the result of pred
   ⏳] ;; repeat until generator below is finished
  🎒   ▶️ 
 ; 🔳 [🔳] [🔀] 🪆 ▶️
#+end_src

#+RESULTS:
#+begin_src kcats
[📤 [[[📤] 🔳 🔳 [🔀] 🪆 ▶️] 🔀]
 🔳 ↔️ [[3 >]
       🛡️ ▶️ ☯️]
 [🔳 🔳]
 ↔️ [🗑️ 🗑️ [[📤 [[[📤] 🔳 🔳 [🔀] 🪆 ▶️] 🔀]
             🔳 ↔️ [[3 >]
                   🛡️ ▶️ ☯️]
             [🔳 🔳]
             ↔️]
            [🗑️ 🗑️]
            🔳 [▶️] 🪆 ▶️]
     ▶️]
 🔳 ↔️]
[1 2 3 4 5]
#+end_src

#+begin_src kcats
  [1 2 3 4 5] liberator
  [3 >]

  [2️⃣ ;; pull the parent generator into this program
   [▶️  ;; exec the generator below to get value v
    [1️⃣ 🛡️ ▶️ ☯️] ;; check if v does NOT match given pred, 
    [🔳 🔳] ;; if generator below is finished, return 2 empty values 
    ↔️]
   [🗑️ 🗑️] ;; drop both the value v and the result of pred
   ⏳ ▶️ ] ;; repeat until generator below is finished
  🎒
  [•🗑️] [🔳] [🔀] 🪆
  collect
#+end_src

#+RESULTS:
#+begin_src kcats
[4 5]
#+end_src

Use normal recursive fn for generators instead of recur?
#+begin_src kcats
[1 2 3 4] liberator
#+end_src

#+RESULTS:
#+begin_src kcats
[📤 [[[📤] 🔳 🔳 [🔀] 🪆 ▶️] 🔀]
 🔳 ↔️]
[1 2 3 4]
#+end_src

#+begin_src kcats
  [1 2 3 4] [📤 [[liberator] 🪄] [[]] ↔️] ▶️ 
#+end_src

#+RESULTS:
#+begin_src kcats
1 [📤 [[[📤] 🔳 🔳 [🔀] 🪆 ▶️] 🔀]
   🔳 ↔️]
[2 3 4]
#+end_src

#+begin_src kcats
  [[lib [[📤 [[lib] 🪄] [[]] ↔️]]]]
  [[1 2 3 4] lib ▶️ 🗑️ ▶️]
  let ▶️ 
#+end_src

#+RESULTS:
#+begin_src kcats
2 [📤 [[lib] 🪄]
   [🔳] ↔️]
[3 4]
#+end_src

#+begin_src kcats
  [[taker [[[[positive?] 🛡️ ;; counter still positive?
             [🗑️ 1️⃣ 🐋]  ;; run the parent generator
             [🔳] ⚖️ ▶️ ] 🎒] 🐋 
           [[dec •🗑️] 🪄 dump taker 🔀 ]
           []
           ⚖️]]]
  [[1 2 3 4 5] liberator
  3 taker ▶️ 🗑️]
  let ▶️ 
  ;;taker

#+end_src

#+RESULTS:
#+begin_src kcats
[1 2 [2 3 4 5]]
[[positive?] 🛡️ [🗑️ 2 🐋] [🔳] ⚖️ ▶️ [[dec •🗑️]
                                    🪄 dump taker 🔀]
 🔳 ↔️]
[2 3 4 5]
#+end_src

* Fold
#+begin_src kcats
    integers generator 25 taker [+]
    [▶️] 🪄 ;; generate the first item below the fold program 
    [[▶️] •🐋]
    [🔀  [▶️] 🛡️ ▶️ ⚓ •🗑️ ••🗑️] [] [▶️] 🪆 ▶️ 🗑️
    ;[[▶️] 🐋 🔳 [✂️1️⃣ 👥] ↔️] 🎒
    ;;; generate the first item under the loop body
    ;[▶️] 🪄
   ; 🌀 ; ▶️
#+end_src

#+RESULTS:
#+begin_src kcats
300 24
#+end_src
org-tanglesync-
* Introspection
Search the docs of emoji words to see which symbol you're looking for
#+begin_src kcats
  words [[1 doc] lookup "swap" contains?] 🧲 ▶️ 
#+end_src

#+RESULTS:
#+begin_src kcats
[[🔀 [[definition builtin-function]
     [doc "The crossing arrows denote swapping the top two stack items."]
     [examples [[[1 2 3 🔀] [1 3 2] "Swap top two items"]]]
     [spec [[[item a]
             [item b]]
            [[item b]
             [item a]]]]]]
 [•🔀 [[definition builtin-function]
      [doc "The crossing arrows with dot represents swapping one stack position down (2nd and 3rd items)"]
      [examples [[[1 2 3 •🔀] [2 1 3] "Swap 2nd and 3rd items"]]]
      [spec [[[item a]
              [item b]
              [item c]]
             [[item a]
              [item c]
              [item b]]]]]]]
#+end_src

apropos - which functions match the stuff on the stack
#+begin_src kcats
  5
  ;; the hierarchy
  [item
   [[number [[integer []]
             [float []]]]
    [container [[disp]]]]]
  📸 [type] 🚜 ▶️
  [integer foo]


  [list?] 🛡️ [🗑️ first 🎁] when ▶️ 
#+end_src

#+RESULTS:
#+begin_src kcats
[integer] [number] 5
#+end_src
* Single-item generators
#+begin_src kcats
  [integers generator 100 taker [👥 *] each [7 mod 0 =] keep]
  [] 🔀 💉 ▶️ ;; encapsulate
  [[▶️] 💉 ▶️ 📤] [] [] [🗑️] 🪆 ▶️

#+end_src

#+RESULTS:
#+begin_src kcats
0 [[[▶️ [[7 mod 0 =] 🛡️ ▶️ ☯️] [🔳 🔳]
     ↔️ [🗑️ 🗑️ [[▶️ [[7 mod 0 =] 🛡️ ▶️ ☯️] [🔳 🔳]
                 ↔️]
                [🗑️ 🗑️]
                🔳 [▶️] 🪆 ▶️]
         ▶️]
     🔳 ↔️]
    🔳 [🔳] [🔀] 🪆 ▶️]
   [[▶️ [📸 🧦 [👥 *]
         🪄 🧦 •🗑️ first]
     bail]
    🔳 [🔳] [🔀] 🪆 ▶️]
   [[📸 🧦 [positive?] 🪄 🧦 first [🗑️ [▶️] 🐋 🔳 [🔳 🔳]
                                ↔️]
     [🔳] ↔️]
    [[dec] 🪄]
    [🗑️ 🗑️ 🔳] [🔀] 🪆 ▶️]
   99 [[inc 👥]
       🔳 🔳 [🔀] 🪆 ▶️]
   0]
#+end_src
#+begin_src kcats
  integers generator 100 taker [👥 *] each [7 mod 0 =] keep collect
#+end_src

#+RESULTS:
#+begin_src kcats
[0 49 196 441 784 1225 1764 2401 3136 3969 4900 5929 7056 8281 9604]
99
#+end_src

* Fix 'type'
#+begin_src kcats
   [[a b][c d][type foo]] association

   [[type] lookup]
   [📏 1 =]
   [first [type] 🍫 =]
   [🗑️ first second]
   [first first]
   ⚖️ 
   [🔳]
   ⚖️
   [[association] 🍫]
   triplet
  [▶️] 📣 ; ▶️ 
#+end_src

#+RESULTS:
#+begin_src kcats
[🔀 [[📤] 🪄 👥 [🛟 [•🛡️] 🐋] 🐋 🔳 [•🗑️ •🗑️]
    [🗑️ 📣]
    ⚖️]
 [🗑️ 🗑️ 🔳] ↔️]
[▶️] [[[type] lookup]
      [📏 1 = [first [type] 🍫 = [🗑️ first second] [first first]
              ↔️]
       [🔳] ↔️]
      [[association] 🍫]]
[[a b]
 [c d]
 [type foo]]
#+end_src
* Fix any
#+begin_src kcats
  ;; start with 💯
  [[] 4 6 8 9 10] []
  [[📤 🔀 1️⃣ 🐋 👥 ☯️] ;; more items
   [[] 🔳 []] ;; empty list, return []
   ↔️ ] 🎒
  [🗑️ 🗑️]
  [•🗑️]
  [▶️] 🪆 ▶️
#+end_src

#+RESULTS:
#+begin_src kcats
4
#+end_src
* Fix pair?
#+begin_src kcats
   [📏 2 =] [[asked] lookup [sized?] =] [🗑️ 🗑️ []] [[]] ⚖️  🩹 ▶️ 
#+end_src

#+RESULTS:
#+begin_src kcats
🔳
#+end_src
* fix zip
#+begin_src kcats
  "foo" "food"
  🔳 ⚓ ;; save accumulator below args
  [[] both?] 🛡️ ;; stop when either list is empty
  [🗑️ [📤] both •🔀 pair ;; take from each list and pair them up
   ⚓ [📮] •🪄] ;; put them into the accumulator
  ⏳ ▶️
  🗑️ 🗑️
#+end_src

#+RESULTS:
#+begin_src kcats
[[\f \f]
 [\o \o]
 [\o \o]]
#+end_src
* fix 'both'
#+begin_src kcats
1 2 [inc] [pair] 🪄 🪜 ▶️
#+end_src

#+RESULTS:
#+begin_src kcats
3 2
#+end_src
* fix starts?
#+begin_src kcats
  "food" "foo"
  [[zip [🍫 =] 💯 ▶️] ;; the items at matching indexes are equal
   [[📏] both >=]] ;; the prefix is shorter than the target
  [▶️] •🛡️ 💯 ▶️ 
  •🗑️ •🗑️
#+end_src

#+RESULTS:
#+begin_src kcats
["foo" "food"]
["foo" "food"]
✔️
#+end_src
* fix type
#+begin_src kcats
  [[forp foo] [bloop toop]]
  [📏 1 =] 🛡️
  [🗑️ first first [type] 🍫 =] 🛡️
  [🗑️ 🗑️ first second]
  [🗑️ first first]
  ⚖️
  [🔳]
  ⚖️ 

  [[type] lookup]
  [[association] 🍫]
  •🔀 triplet 
  [🛡️ ▶️] 📣 ▶️ •🗑️
#+end_src

#+RESULTS:
#+begin_src kcats
association
#+end_src

#+begin_src kcats
  [[typef foo]]
  [[[📏 1 =] [🗑️
              [first first [type] 🍫 =] 🛡️
              [🗑️ first second]
              [first first]
              ⚖️ ▶️]]
   [[[type] lookup] [•🗑️]]
   [[✔️] [[association] 🍫]]] decide
#+end_src

#+RESULTS:
#+begin_src kcats
typef
#+end_src

#+RESULTS:
#+begin_src kcats
✔️
#+end_src

#+begin_src kcats
   ;[[type foo] [x y]] association
   ;"foo" encodestring
   [[types bar] [sdf fdsd]] association
   [[[empty?] [[nothing]]]
    [[word?] [[word]]]
    [[number?] [[number]]]
    [[string?] [[string]]]
    [[bytes?] [[bytes]]]
    [[pipe?] [[pipe]]]
    [[error?] [[error]]]
    [[environment?] [[environment]]]
    [[set?] [[set]]]
    [[association?] [🗑️ [[[📏 1 =] [🗑️
                                   [first first [type] 🍫 =] 🛡️
                                   [🗑️ first second]
                                   [first first]
                                   ⚖️ ▶️]]
                      [[[type] lookup] [•🗑️]]
                      [[✔️] [[association] 🍫 •🗑️ •🗑️ dump]]] decide
                     🎁 [] [] 🛟]]
    [[list?] [[list]]]
    [[✔️] [[item]]]]
   decide 🍫 •🗑️ •🗑️ 
#+end_src

#+RESULTS:
#+begin_src kcats
[[association]]
association
#+end_src
* book
#+begin_src kcats
  [[price 15][name foo]] [[price 10] [name bar]] pair [[price] lookup] sort reverse first
#+end_src

#+RESULTS:
#+begin_src kcats
[[price 15]
 [name foo]]
#+end_src
* loop in terms of recur
  avoids running pack each time:
  #+begin_src kcats
    10 ✔️ [🗑️ -2 * 👥 50 <]
    [] 🔀 [] [▶️] 🪆 
    ▶️
  #+end_src

  #+RESULTS:
  #+begin_src kcats
  160
  #+end_src
* COMMENT until
#+begin_src kcats
    2 [even?] [inc] generator
  ;[🎭] 🪄 ⏳ ▶️ 
#+end_src

#+RESULTS:
#+begin_src kcats
[inc [[[inc] 🔳 🔳 [🔀] 🪆 ▶️] 🔀]
 🔳 ↔️]
[even?] 2
#+end_src

#+begin_src kcats
   2 [even?]  🛡️ [🗑️ inc]
   [🎭] 🪄 ;; reverse logic of pred
   ;; run body once, with dummy pred result
   👥 [[[]] 🔀 🔗 🪄] 🪄 ⏳ ▶️ 
#+end_src

#+RESULTS:
#+begin_src kcats
4
#+end_src
* advance
#+begin_src kcats
  [1 2 +] stage
  [[program] lookup 📏] 🛡️ ▶️ 🔀 ;; count up the program length, we'll run until it's smaller than this

  [[[program] lookup 📏] 🛡️ ▶️ dump  ;; only stop if expr empty or shorter than we started off
   [[ positive?] [<=]] [🛡️ ▶️] 💯 🛡️ ▶️ ]
  [🗑️ eval-step]  ;; evaluate the environment one step
  ⏳ ▶️
  •🗑️
#+end_src

#+begin_src kcats
  [1 2 ] stage
  👥 [program] lookup 📏 🔀
  [[program] lookup 📏
   [[positive?] [<=]] [🛡️ ▶️] 💯 ▶️] 🛡️ 
  [🗑️ eval-step]
  ⏳ ▶️ •🗑️
#+end_src

#+RESULTS:
#+begin_src kcats
[[dictionary [[modules 🔳]
              [words 260_entries]]]
 [program [2]]
 [stack [1]]]
#+end_src
* using
#+begin_src kcats
  [#b64 "zubPuf7fwUx1W6i8RJqAE8DR43dHFfnjx1xulAZ0D_U"]
  [words [fibonacci] lookup]
  stage 🔀 ;; lm env
  [[stack] [📸] •🐋 assign] 🪄 ;; capture the stack at runtime
  using ;; set up the resolver 
  evaluate ;; execute the program in the inner environment
  [stack] lookup restore
#+end_src

#+RESULTS:
#+begin_src kcats
🔳
#+end_src

#+RESULTS:
#+begin_src kcats
Error parsing input: [[asked [read]] [reason "Invalid float"] [type error]]
#+end_src

#+begin_src kcats
  dictionary #b64 "zubPuf7fwUx1W6i8RJqAE8DR43dHFfnjx1xulAZ0D_U" decache
  [[hashbytes] ;; calculate module hash
   [string read  [words] 🔀 dump update]] ;; install the module in the dictionary
  [▶️] 🚜 ▶️ ;; fork 
  •🗑️ 🍫 •🔀 ;dictmerge
#+end_src

#+RESULTS:
#+begin_src kcats
[[[[fibonacci [[definition [1 0 [[+] •🛡️ ▶️ 🔀 👥]]]]]] 🔗]
 [words] [[modules 🔳]
          [words 260_entries]]]
[[modules 🔳]
 [words 261_entries]]
[[modules 🔳]
 [words 260_entries]]
#b64 "zubPuf7fwUx1W6i8RJqAE8DR43dHFfnjx1xulAZ0D_U"
#+end_src

#+begin_src kcats
words [[fibonacci [[definition [1 0 [[+] •🛡️ ▶️ 🔀 👥]]]]]]
🔗

#+end_src

#+RESULTS:
#+begin_src kcats
261_entries
#+end_src

figure out which modules are present
#+begin_src kcats
  dictionary #b64 "zubPuf7fwUx1W6i8RJqAE8DR43dHFfnjx1xulAZ0D_U" decache

  inscribe
  [words [[0] lookup] 🚜 ▶️] [program dictionary] label evaluate
  ;[first] 🚜 ▶️ 
  ;first ;second inspect
#+end_src

#+RESULTS:
#+begin_src kcats
[[dictionary [[modules 🔳]
              [words 261_entries]]]
 [program 🔳]
 [stack [[•🐋 tunnel ••🐋 cache > parse-utf8 emit get each cut ▶️ top 💉 floor set use
          🩹 file-out frequencies inspect
          •🛡️ future •🪄 🧹 assign walk zubPuf7fwUx1W6i8RJqAE8DR43dHFfnjx1xulAZ0D_U/fibonacci
          🍫 🪜 string stepper 🎁 string? empty environment character resolve list? encodejson
          empty?
          quot 🗑️ addmethod catcher evaluate 📏 radix update autoformat indexed days association
          inc advance 🔀 standard abs dec sqrt finished?
          pair? until 📮 within? prime draft max-by using pipe? 🛟 reap heatmap parse >= ⏳ both?
          decide ••👥 pop min-by
          first attend rest taker hours 💯 range 🧦 under indexof starts? format number exp handoff
          set? timestamps compare-by let capture
          fail random odd? or split definition and intersection <= spit serversocket 🎒 tos
          slice sort-indexed encodenumber sprint confine pair lookup
          stage socket ••🪄 timer min both = interpose assemble 👥 rem bail pipe-out sender repetition
          sign •🔀 + * verify
          🪆 round association? - 🚜 breakpoint spawn resume last encodestring flip second 🪄
          dipped combinations when dump label 🐋 ↔️
          break 🔗 skipper joiner dictmerge sleep encode error? contains? ••🗑️ slurp print method?
          file-in keep minutes sort times fold generator
          🌀 positive? mod bytes? words seconds bits ends? receiver animate group word? max
          ••🛡️ pipe-in cram handle •🗑️ 🛡️ dropper
          over integers log number? milliseconds liberator pad read type 📤 even? zip triplet
          assert database environment? / close flatten butlast
          🧲 xor primrec zero? prepend eval-step ⚓ negative? hashbytes ☯️ decodejson something?
          tracer restore persist value collect produce 🎭 ceiling
          reverse retry updates parse-edn word dictionary key compare unassign ✔️ decache select
          •👥 📸 ⚖️ 📣 indexer entry module inscribe
          <]]]]
#+end_src
* Fix sweep
#+begin_src kcats
  0 10 1 range liberator
  5 dropper [10 *] each []
  [[▶️] 🐋] [📮] [•🗑️] [▶️] 🪆 ▶️ 
#+end_src

#+RESULTS:
#+begin_src kcats
[50 60 70 80 90]
#+end_src
* fix group
#+begin_src kcats
  [1 2 3 4 5] liberator [odd?]
  🛡️
  [1️⃣ ▶️ ;; k v state
   🎁 🔀   ;;  v k state
   🎁 [📮] 🔗  update] 🎒
  🔳 association ;; state f
  🔀 cram
#+end_src

#+RESULTS:
#+begin_src kcats
[[✔️ [1 3 5]]
 [🔳 [2 4]]]
🔳
#+end_src
* fix partition
#+begin_src kcats
    [[take-chunk [[taker collect dump
                  ; •🗑️ •🗑️
                  ] ; drop the used-up taker generator
                  🔗 •🐋]]
     [shift [[📏 <=]
             [🔀 0 slice]
             [🔳] ⚖️ 🛡️ ▶️ 🔀]]
     [partition [[over 🎁 take-chunk [🔗 shift] bail]
                 [[over] 🐋 wrap take-chunk 🔀 🗑️ shift]
                 ↔️]]]
     [[1 2 3 4 5 6 7] [ 2 2 partition] assemble] let ▶️
#+end_src

#+RESULTS:
#+begin_src kcats
[[1 2]
 [3 4 5 6 7]]
[[actual 2]
 [asked [sized?]]
 [handled 🔳]
 [reason "type mismatch"]
 [type error]
 [unwound [🔗 shift 🔳 🧦 first]]]
[1 2]
2 2 [3 4 5 6 7]
#+end_src
* fix produce
#+begin_src kcats
  [integers generator
   [👥 *] each
   10 dropper] [] 🔀 💉 ▶️
  [▶️] 💉 ▶️ 📤 🗑️ 
  [▶️] 💉 ▶️ 📤
#+end_src

#+RESULTS:
#+begin_src kcats
121 [[[▶️ [📸 🧦 [👥 *]
           🪄 🧦 •🗑️ first]
       bail]
      🔳 [🔳] [🔀] 🪆 ▶️]
     [[inc 👥]
      🔳 [🔳] [🔀] 🪆 ▶️]
     11]
#+end_src
* fix parse
#+begin_src kcats
  [[104 101 108 108 111]              ;; "hello" (all ASCII)
   [228 189 160 229 165 189]          ;; "你好" (two complete Chinese chars)
   [104 105 226]                      ;; "hi" + start of "€"
   [130 172]                          ;; completion of "€"
   [240 159 145]                      ;; start of "👑"
   [145]                              ;; completion of "👑"
   [97 98 99 240]                     ;; "abc" + start of "🌈"
   [159 140 136]]                     ;; completion of "🌈"



  liberator
  [#b64 "" 🔀 [📮] 🪜 ▶️] each ;; convert lists of ints to byte arrays
  [parse-utf8]

  🔳 🔳 ;; state - parsed object output (on top) and unparsed input 

  [[👥 ☯️] ; there's no output
   [🗑️ [▶️] ••🐋] ;; exec parent generator 
   [[]] ;; leave an empty value to be consumed by outer ⏳ exiting
   ⚖️ 
   [🔀 [🔗] 🪄 ;; new input to previous input
    [👥] •🐋 ▶️] ;; exec a copy of parser program: output input parser
   ⏳ ▶️] ;; leave the output on top for the recurrence condition check
  [📤] []
  [🔀] 🪆 "" 🧹 ▶️ 


#+end_src

#+RESULTS:
#+begin_src kcats
"hello你好hi€👑abc🌈" [parse-utf8] 🔳
#+end_src



byte array convert
#+begin_src kcats
  [104 101 108 108 111] #b64 "" 🔀 [📮] 🪜 ▶️
#+end_src

#+RESULTS:
#+begin_src kcats
#b64 "aGVsbG8"
#+end_src

#+begin_src kcats
  [] [] ["yes"] when
  ["yeswhile"] ⏳ ▶️ 
#+end_src

#+RESULTS:
#+begin_src kcats
[[asked [consume]]
 [handled 🔳]
 [reason "not enough items on stack"]
 [type error]
 [unwound [↔️]]]
🔳 ["yeswhile" [[["yes"] 🔳 ↔️] ["yeswhile"] 🔳 [▶️] 🪆 ▶️] ▶️]
#+end_src

* Fix every
#+begin_src kcats
  [1 2 3] [[📤] []] [▶️]

  [[📤 🔀 1️⃣ 🐋 👥] ;; more items
   [🔳 ✔️ 🔳] ;; empty list, return ✔️
   ↔️] 🎒
  [dump 🗑️ 🗑️]
  [•🗑️]
  [] 🪆 ▶️ 
#+end_src

#+RESULTS:
#+begin_src kcats
[1 1 [🔳] [2 3]]
[[[📤 🔀 [▶️] 🐋 👥] [🔳 ✔️ 🔳] ↔️] [dump 🗑️ 🗑️] [•🗑️] 🔳 🪆 ▶️] [🔳] [2 3]
#+end_src

#+begin_src kcats
  [1 2 3] [[📤] []] [▶️]

  [[📤 🔀 1️⃣ 🐋 👥] ;; more items
   [🔳 ✔️ 🔳] ;; empty list, return ✔️
   ↔️] 🎒
  [dump 🗑️ 🗑️]
  [•🗑️]
  [] 🪆 ▶️ 
#+end_src

ok what we want here is not 'every' - we want call chaining like =bail= but for multiple rounds.

Let's write it! And I think we should have =every= and =any= go back to
pure logical tests and enforce the "same stack" invariant.

#+begin_src kcats
   1
   [[👥 odd?] [🗑️ inc] [👥 odd?] [🗑️ inc]]
  ; []
   [and] •🛡️
   [📤 🪄]
   ⏳ ▶️ 
#+end_src

#+RESULTS:
#+begin_src kcats
🔳 2
#+end_src

#+begin_src kcats
  [2 4 6] [inc]
  🛡️ 
  [[📤 🔀 1️⃣ 🐋 👥] ;; more items
   [ 🔳 ✔️ 🔳] ;; empty list, return ✔️
   ↔️] 🎒
  [🗑️ 🗑️]
  [•🗑️]
  [▶️] 🪆 ▶️ 
#+end_src

#+RESULTS:
#+begin_src kcats
✔️
#+end_src
* Fix split
#+begin_src kcats
    "abddcfdedd" ;liberator
    ["dd"

    split


    parse
    collect] assemble

#+end_src

#+RESULTS:
#+begin_src kcats
["ab" "cfde"]
#+end_src

next: handle end of stream

#+RESULTS:
#+begin_src kcats
[[\a \b]
 "cfde"]
[🔳] [[👥 [📮 "dd"]
      🪄 [☯️] [ends?] 🛡️ pair [▶️] 📣 [🗑️ 📏 0 🔀 - 0 🔀 slice]
      [🗑️ 🔳]
      ⚖️ ▶️]
     🪄 🔀 [📮 "" 🔀] 🔳 ↔️]
""
#+end_src

let's see if this version of parse works with other stuff
#+begin_src kcats
  [[104 101 108 108 111]              ;; "hello" (all ASCII)
   [228 189 160 229 165 189]          ;; "你好" (two complete Chinese chars)
   [104 105 226]                      ;; "hi" + start of "€"
   [130 172]                          ;; completion of "€"
   [240 159 145]                      ;; start of "👑"
   [145]                              ;; completion of "👑"
   [97 98 99 240]                     ;; "abc" + start of "🌈"
   [159 140 136]]                     ;; completion of "🌈"
  liberator
  [#b64 "" 🔀 [📮] 🪜 ▶️] each ;; convert lists of ints to byte arrays
  [ parse-utf8] #b64 ""
  🔳 ;; state - parsed object output buffer (on top), unparsed input 

  [] ;; there's output?
  [[]]  ;; leave an empty value to be consumed by outer ⏳ exiting
  [[] [▶️] ••🐋] ;; exec parent generator 
  ⚖️ 
  [🔀 [👥] ••🐋 ▶️] ;; exec a copy of parser program: output input parser
  ⏳ ;; leave the output on top for the recurrence condition check
  [📤] [[[]] 🔀]
  [🔀] 🪆 "" 🧹 ▶️ 
#+end_src

#+RESULTS:
#+begin_src kcats
"hello你好hi€👑abc🌈" [🔳] [parse-utf8] 🔳
#+end_src

* Convert number list to bytes
#+begin_src kcats
  1
  [list?]
  [number?] 💯 pair [🛡️ ▶️] 💯 ▶️
#+end_src

#+RESULTS:
#+begin_src kcats
🔳 1
#+end_src
* fix indexof
#+begin_src kcats
  [a b c] 
  [c] 🍫
  [[second 🎁 [1️⃣] = ☯️] skipper
   [indexer] •🪄
   ▶️ first] 🎒 

  assemble
#+end_src

#+RESULTS:
#+begin_src kcats
2
#+end_src
* Fix skipper, dropper to be lazy
dropper
#+begin_src kcats
  [1 2 3 4 5] liberator
  6

  [positive?] 🛡️ ;; condition
  [🗑️ [▶️] 🐋 ;; call parent 
   🔳 ;; if we get something, we're done
   [🗑️ 🔳 🔳] ;; otherwise signal stop with empty generator
   ↔️]
  [🗑️ ▶️ 🔳] ⚖️ ;; if counter reaches zero we're done dropping 
  [🗑️ dec] ⏳
  [] [🔳] [🗑️] 🪆 
  collect

#+end_src

#+RESULTS:
#+begin_src kcats
🔳 🔳
#+end_src

#+begin_src kcats
   [1 2 3 4 5] liberator [10 <]

   [[▶️] 🐋] ;; get the item from parent
   [🔀 [▶️] 🛡️ ▶️] ;; run the pred on it, keep the pred
   [🗑️ 🔳 🔳] ⚖️ ;; when parent is empty, leave negative on the stack
   [🗑️ •🗑️] ⏳ ;; keep consuming items while they match pred
   [] [[]] [🗑️ 🗑️] 🪆
   collect

#+end_src

#+RESULTS:
#+begin_src kcats
🔳 🔳
#+end_src
* Fix radix
#+begin_src kcats
  33 2

  [🗑️ 1️⃣ [/] 🛡️ ▶️ 🔀 
   [*] •🛡️ ▶️
   •🔀 -
   🔀 [prepend] 🪄] 🎒

  [🔳 🔀 [positive?] 🛡️] 🪄
  ⏳ ▶️ 🗑️ 


#+end_src

#+RESULTS:
#+begin_src kcats
[1 0 0 0 0 1]
#+end_src

#+begin_src kcats
7 2.1 quot
#+end_src

#+RESULTS:
#+begin_src kcats
3.333333333333333
#+end_src
* fix pad
#+begin_src kcats
  [1 2 3] 5 0 
  [[[📏] 🛡️ ▶️] 🐋 -] 🪄
  🔀 repetition ▶️ 
  🔀 🔗
#+end_src

#+RESULTS:
#+begin_src kcats
[0 0 1 2 3]
#+end_src
* fix cut
#+begin_src kcats
  "abcdefghijklmnopqrstuvwxyz" 5
  [[[📏] 🛡️ 🐋 slice]
   [0 🔀 slice]]
  [▶️] 🚜 ▶️ 
  [🗑️ 🗑️] 🪄 🍫
#+end_src

#+RESULTS:
#+begin_src kcats
"abcde" "fghijklmnopqrstuvwxyz"
#+end_src
* fix frequencies
#+begin_src kcats
  "Hello there!" liberator
  🔳 association
  [🎁 [🔳 [inc] [1] ⚖️ ▶️ ] update]
  cram
#+end_src

#+RESULTS:
#+begin_src kcats
[[\space 1]
 [\! 1]
 [\H 1]
 [\e 3]
 [\h 1]
 [\l 2]
 [\o 1]
 [\r 1]
 [\t 1]]
""
#+end_src
