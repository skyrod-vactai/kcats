name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag'
        required: true

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref }}
          release_name: Release ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref }}
          draft: false
          
  build_and_upload:
    needs: create_release
    name: Build and Upload
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        
    steps:
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install Emacs (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y emacs

    - name: Install Emacs (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install emacs

    - name: Install Emacs and sqlite (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        choco install emacs sqlite --confirm


    - name: Set up SQLite3 environment variables
      run: |
          $libPath = (choco list --local-only --exact sqlite | Select-String -Pattern "sqlite" | Out-String).Split()[1]
          $libPath = $libPath.Replace('.','-').Replace(' ', '-')
          $libDir = "${env:ChocolateyInstall}\lib\${libPath}\bin"
          echo "::add-path::$libDir"
          echo "::set-env name=LIBRARY_PATH::$libDir"
          echo "::set-env name=LD_LIBRARY_PATH::$libDir"
          echo "::set-env name=SQLITE3_LIB_DIR::$libDir"
          echo "::set-env name=SQLITE3_INCLUDE_DIR::$libDir\include"

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Tangle org-mode files
      run: emacs --batch --load org --load tangle.el

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --all-targets --features=database

    - name: Upload Release Asset
      if: success()
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: target/release/kcats${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        asset_name: ${{ matrix.os }}/kcats${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        tag: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref }}    
